name: Go

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATABASE_USER: root
      DATABASE_PASSWORD: root
      DATABASE_PORT: 3306
      DATABASE_HOST: 127.0.0.1
      DATABASE: workout_tracker
      SERVER_PORT: 9000
      GIN_MODE: debug
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.4"

      - name: Start MySQL Service
        run: |
          sudo systemctl start mysql.service

      - name: Install MySQL client and netstat
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client net-tools

      - name: Create Database
        run: |
          mysql -u $DATABASE_USER -p"$DATABASE_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS workout_tracker;"

      - name: Build
        run: go build -v -o ./workout

      - name: Start Server in Background
        run: |
          # Start server with detailed logging
          GIN_DEBUG=1 ./workout server > server.log 2>&1 &
          echo $! > server.pid
          sleep 5  # Give server time to start

      - name: Debug Server Status
        run: |
          echo "Checking server process..."
          ps aux | grep workout
          
          echo "Checking port 9000..."
          netstat -tulpn | grep 9000
          
          echo "Server logs..."
          cat server.log
          
          echo "Testing connection..."
          curl -v http://0.0.0.0:9000/workouttracker/health || true

      - name: Server health status check
        run: |
          for i in {1..5}; do
            echo "Attempt $i: Checking server health..."
            if curl -v --connect-timeout 10 http://0.0.0.0:9000/workouttracker/health; then
              echo "Server is healthy!"
              exit 0
            fi
            sleep 5
          done
          echo "Server failed to respond after 5 attempts"
          exit 1

      - name: Stop Server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
