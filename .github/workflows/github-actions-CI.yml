name: Go

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.4"

      - name: Start MySQL Service
        run: |
          sudo systemctl start mysql.service

      - name: install mysql client
        run: |
          sudo apt-get update
          sudo apt-get install -y  mysql-client 

      - name: Create Database
        env: 
            MYSQL_ROOT_USER: root
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE_USER: root
            MYSQL_DATABASE_PASSWORD: root
            MYSQL_PORT: 3306
            MYSQL_HOST: 127.0.0.1
            MYSQL_DATABASE: workout_tracker
        run: |
          mysql -u $MYSQL_ROOT_USER -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS workout_tracker;"

      - name: Verify Root User Access
        run: |
          mysql -u $MYSQL_ROOT_USER -p"$MYSQL_ROOT_PASSWORD" -e "USE workout_tracker; SHOW TABLES;"

      - name: Build
        run: go build -o ./workout

      - name: Start Server in Background
        run: |
          nohup ./workout server > server.log 2>&1 &
          echo $! > server.pid  # Save the process ID

      - name: Check Log File Existence
        run: |
            if [ -f server.log ]; then
              echo "server.log exists:"
              cat server.log
            else
              echo "server.log does not exist"
            fi

      - name: Verify Port Binding
        run: |
          sudo apt-get update && sudo apt-get install -y net-tools
          netstat -tuln | grep 9000 || echo "No service bound to port 9000"

      - name: Server health status check
        run: |
          sleep 5  # Give server some time to start
          response=$(curl -v http://localhost:9000/workouttracker/health)
          if [[ "$response" == '{"Status":"Healthy"}' ]]; then
            echo "Server is up, running and healthy!"
          else
            echo "Server is not healthy...."
            exit 1
          fi

      - name: Stop Server
        run: |
          kill $(cat server.pid)
